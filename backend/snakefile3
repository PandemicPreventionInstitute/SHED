"""
Writen by Devon Gregory
This snakefile is meant to be run via snakemake to finish the
bioinformatics processing for SRA samples.
Last edited on 7-10-22
to do: add threading, impliment clean up, tests
"""
import os
from snakemake.utils import min_version

min_version("7.8.0")


snakepath = os.path.realpath(sys.path[0])
configfile: f"{snakepath}/config.yaml"


include: f"{snakepath}/modules/snakefunctions.py"


sra_accs = get_sample_acc2(config["reprocess"])
qc_passed = qc_pass(sra_accs)

rule all:
    """
    Establishes targets for snakemake and initial wildcard values
    """
    input:
        expand("sams/{sra_acc_qced}.bam", sra_acc_qced=qc_passed),
        "endpoints/aggregate.done",


rule sam2bam:
    """
    convert, sort and index the sams to bams using samtools (comes with ivar)
    """
    input:
        "sams/{sra_acc_qced}.sam",
    output:
        "sams/{sra_acc_qced,\D+\d+}.bam",
    log:
        "logs/{sra_acc_qced}.bam.log",
    conda:
        "envs/ivar.yaml"
    shell:
        "samtools sort {input} -o {output} >>{log} 2>&1 && samtools index {output} >>{log} 2>&1"


rule primer_trim:
    """
    trim primers from samples where the sequencing primers can be determined using ivar
    """
    input:
        "sams/{sra_acc_qced}.bam",
    output:
        touch("sams/{sra_acc_qced}.trim.done"),
    params:
        lambda wildcards: (sra_accs[wildcards.sra_acc_qced]["bed"]),
    log:
        "logs/{sra_acc_qced}.trim.log",
    conda:
        "envs/ivar.yaml"
    shell:
        "if [ ! {params} == 'Unknown' ]; then ivar trim -b {snakepath}/{params} -p sams/{wildcards.sra_acc_qced}.trimmed \
        -i {input} -e -q 15 -m 30 -s 4  >>{log} 2>&1 && \
        samtools sort sams/{wildcards.sra_acc_qced}.trimmed.bam -o sams/{wildcards.sra_acc_qced}.trimmed.sorted.bam >>{log} 2>&1 \
        && samtools index sams/{wildcards.sra_acc_qced}.trimmed.sorted.bam >>{log} 2>&1 ; fi"


rule consensus:
    """
    uses ivar to generate a consensus sequence
    uses primer trimmed bam if available, otherwise uses basal bam
    """
    input:
        "sams/{sra_acc_qced}.trim.done",
        fa=f"{snakepath}/data/SARS2.fasta",
    output:
        "endpoints/{sra_acc_qced}.fa",
    log:
        "logs/{sra_acc_qced}.con.log",
    conda:
        "envs/ivar.yaml"
    shell:
        """
        if [[ -f sams/{wildcards.sra_acc_qced}.trimmed.sorted.bam ]]
        then
        samtools mpileup -aa -A -d 600000 -B -Q 0 sams/{wildcards.sra_acc_qced}.trimmed.sorted.bam 2>>{log} | \
        ivar consensus -p endpoints/{wildcards.sra_acc_qced} -q 15 -t 0.5 >>{log} 2>&1
        else
        samtools mpileup -aa -A -d 600000 -B -Q 0 sams/{wildcards.sra_acc_qced}.bam 2>>{log} | \
        ivar consensus -p endpoints/{wildcards.sra_acc_qced} -q 15 -t 0.5 >>{log} 2>&1
        fi
        """


rule vc:
    """
    calls variants with ivar and depths with samtools
    trimmed bams are used if primers were discovered, otherwise basal bams are used
    """
    input:
        "sams/{sra_acc_qced}.trim.done",
        fa=f"{snakepath}/data/SARS2.fasta",
        gff=f"{snakepath}/data/NC_045512.2.gff3",
    output:
        tsv="endpoints/{sra_acc_qced}.tsv",
        depth="endpoints/{sra_acc_qced}.depth",
    log:
        "logs/{sra_acc_qced}.ivar.log",
    conda:
        "envs/ivar.yaml"
    shell:
        """
        if [[ -f sams/{wildcards.sra_acc_qced}.trimmed.sorted.bam ]]
        then
        samtools mpileup -aa -A -d 600000 -B -Q 0 \
        sams/{wildcards.sra_acc_qced}.trimmed.sorted.bam | ivar variants -p \
        endpoints/{wildcards.sra_acc_qced} -q 0 -t 0 -r {input.fa} -g {input.gff} > {log} 2>&1
        samtools mpileup -aa -A -d 600000 -Q 0 -q 0 -B -f {input.fa} \
        sams/{wildcards.sra_acc_qced}.trimmed.sorted.bam | cut -f1-4 > {output.depth} 2> {log}
        else
        samtools mpileup -aa -A -d 600000 -B -Q 0 \
        sams/{wildcards.sra_acc_qced}.bam | ivar variants -p \
        endpoints/{wildcards.sra_acc_qced} -q 0 -t 0 -r {input.fa} -g {input.gff} > {log} 2>&1
        samtools mpileup -aa -A -d 600000 -Q 20 -q 0 -B -f {input.fa} \
        sams/{wildcards.sra_acc_qced}.bam | cut -f1-4 > {output.depth} 2> {log}
        fi
        """


rule update_freyja:
    """
    makes sure freyja is up to date
    """
    output:
        temp(touch("freyja.updated")),
    conda:
        "envs/freyja.yaml"
    shell:
        "if [[ {config["freya_update"]} == True ]]; then freyja update; fi"


rule lineages:
    """
    generates a lineage report using freyja
    """
    input:
        rules.update_freyja.output,
        infiles=rules.vc.output,
    output:
        "endpoints/{sra_acc_qced}.lineages.tsv",
    log:
        "logs/{sra_acc_qced}.lin.log",
    conda:
        "envs/freyja.yaml"
    shell:
        "freyja demix {input.infiles} --output {output} >>{log} 2>&1"


rule aggregate:
    """
    calls aggregation function to collect sample data into aggregate files
    potential TODO: add aggregation of metadata
    """
    input:
        vcs=expand(
            "endpoints/{sra_acc_qced}.tsv", sra_acc_qced=qc_passed, allow_missing=True
        ),
        cons=expand(
            "endpoints/{sra_acc_qced}.fa", sra_acc_qced=qc_passed, allow_missing=True
        ),
        lins=expand(
            "endpoints/{sra_acc_qced}.lineages.tsv",
            sra_acc_qced=qc_passed,
            allow_missing=True,
        ),
    output:
        touch("endpoints/aggregate.done"),
    run:
        aggregate_endpoints(input.vcs, input.cons, input.lins, config["reprocess"])
