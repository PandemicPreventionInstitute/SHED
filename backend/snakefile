"""
Written by Devon Gregory
This snakefile is meant to be run via snakemake to perform the
query and SRA download for the bioinformatics pipeline.
Last edited on 5-29-23
"""
import os
import time

snakepath = os.path.realpath(sys.path[0])
configfile: f"{snakepath}/config.yaml"

include: f"{snakepath}/modules/snakefunctions.py"

# dertermine working dir path
if not config["work_path"]:
    config["work_path"] = os.getcwd()
workdir: config["work_path"]

# query SRA, get the meta data and pull accessions from it
if config["query"]:
    if config["run_ID"]:
        RUN_ID = config["run_ID"]
    else:
        RUN_ID = time.time()
    sra_query(config["query"], RUN_ID, config["overwrite"])
    parse_xml_meta(RUN_ID, config["overwrite"])

acc_list = get_sample_acc1(config["reprocess"])


UPDATE = config["freyja_update"]

rule all:
    """
    Establishes targets for snakemake and initial wildcard values
    """
    input:
        expand("{sra_acc}.done", sra_acc=acc_list),

rule update_freyja:
    """
    makes sure freyja is up to date
    """
    output:
        temp(touch("freyja.updated")),
    conda:
        "envs/freyja.yaml"
    shell:
        """
        if [[ {UPDATE} == True ]]
        then
        freyja update
        echo $(date +'%Y-%m-%d.%T') >> freyja.update.times
        fi
        """

rule process_acc:
    """
    Fully processes one SRA sample, removing all intermediates as soon as they are no longer needed
    """
    input:
        rules.update_freyja.output,
        fa=f"{snakepath}/data/SARS2.fasta",
        gff=f"{snakepath}/data/NC_045512.2.gff3",
    output:
        temp(touch("{sra_acc}.done")),
    params:
        gen="--dont_eval_duplication -5 -3 -l 50 ",
        cutting=lambda wildcards: acc_list[wildcards.sra_acc]["cut"],
        bed=lambda wildcards: (acc_list[wildcards.sra_acc]["bed"]),
    log:
        "logs/{sra_acc}.log",
    threads: 4
    conda:
        "envs/shed-be.yaml",
    resources: download_streams=1,
    shell:
            """
            set +e
            if [[ ! -d SRAs ]]
            then
            mkdir SRAs
            fi
            prefetch {wildcards.sra_acc} -O SRAs >>{log} 2>&1
            exitcode=$?
            if [ $exitcode -eq 3 ]
            then
                touch 'SRAs/'{wildcards.sra_acc}'.no.data'
            elif [ $exitcode -ne 0 ]
            then
                echo "prefetch failed with exitcode:"
                echo "$exitcode"
                exit 1
            fi

            cd SRAs
            fasterq-dump --split-files -f -O ../fastqs {wildcards.sra_acc} >>../{log} 2>&1
            exitcode=$?
            if [ $exitcode -eq 3 ]
            then
                touch '../fastqs/'{wildcards.sra_acc}'.no.data'
            elif [ $exitcode -ne 0 ]
            then
                echo "prefetch failed with exitcode:"
                echo "$exitcode"
                exit 1
            fi
            cd ..

            if [[ -d {wildcards.sra_acc} ]]
            then
            rm -fr {wildcards.sra_acc}
            fi
            if [[ -f fastqs/{wildcards.sra_acc}.fastq ]]
            then
            fastp {params.gen}{params.cutting}-i fastqs/{wildcards.sra_acc}.fastq -o fastqs/{wildcards.sra_acc}.qc.fq \
            -j fastqs/{wildcards.sra_acc}.se.json -h fastqs/{wildcards.sra_acc}.se.html >>{log} 2>&1
            rm fastqs/{wildcards.sra_acc}.fastq
            fi
            if [[ -f fastqs/{wildcards.sra_acc}_1.fastq ]]
            then
            fastp --detect_adapter_for_pe {params.gen}{params.cutting}-i fastqs/{wildcards.sra_acc}_1.fastq \
            -I fastqs/{wildcards.sra_acc}_2.fastq -o fastqs/{wildcards.sra_acc}_1.qc.fq -O fastqs/{wildcards.sra_acc}_2.qc.fq \
            -j fastqs/{wildcards.sra_acc}.pe.json -h fastqs/{wildcards.sra_acc}.pe.html >>{log} 2>&1
            rm fastqs/{wildcards.sra_acc}_1.fastq
            rm fastqs/{wildcards.sra_acc}_2.fastq
            fi

            if [[ ! -d sams ]]
            then
            mkdir sams
            fi
            if [[ -f fastqs/{wildcards.sra_acc}_1.qc.fq && -f fastqs/{wildcards.sra_acc}_2.qc.fq ]]
            then
            minimap2 -ax sr {input.fa} fastqs/{wildcards.sra_acc}_1.qc.fq fastqs/{wildcards.sra_acc}_2.qc.fq \
            -o sams/{wildcards.sra_acc}.sam --secondary=no --sam-hit-only >>{log} 2>&1
            rm fastqs/{wildcards.sra_acc}_1.qc.fq
            rm fastqs/{wildcards.sra_acc}_2.qc.fq
            elif [[ -f fastqs/{wildcards.sra_acc}.qc.fq ]]
            then
            minimap2 -ax sr {input.fa} fastqs/{wildcards.sra_acc}.qc.fq \
            -o sams/{wildcards.sra_acc}.sam --secondary=no --sam-hit-only >>{log} 2>&1
            rm fastqs/{wildcards.sra_acc}.qc.fq
            fi
            if [[ -f sams/{wildcards.sra_acc}.sam ]]
            then
            mapped_num=$(wc -l < sams/{wildcards.sra_acc}.sam)
            if [[ mapped_num -gt 501  ]]
            then
            touch sams/{wildcards.sra_acc}.qc.passed
            else
            touch sams/{wildcards.sra_acc}.qc.failed
            fi
            fi
            if [[ -f sams/{wildcards.sra_acc}.qc.passed ]]
            then
            samtools sort sams/{wildcards.sra_acc}.sam -o sams/{wildcards.sra_acc}.bam -@ 4 >>{log} 2>&1
            samtools index sams/{wildcards.sra_acc}.bam >>{log} 2>&1
            if [[ -f sams/{wildcards.sra_acc}.sam ]]
            then
            rm sams/{wildcards.sra_acc}.sam
            fi
            if [ ! {params.bed} == 'Unknown' ]
            then
            ivar trim -b {snakepath}/{params.bed} -p sams/{wildcards.sra_acc}.trimmed \
            -i sams/{wildcards.sra_acc}.bam -e -q 15 -m 30 -s 4  >>{log} 2>&1 && \
            samtools sort sams/{wildcards.sra_acc}.trimmed.bam -o sams/{wildcards.sra_acc}.trimmed.sorted.bam >>{log} 2>&1 \
            && samtools index sams/{wildcards.sra_acc}.trimmed.sorted.bam >>{log} 2>&1
            rm sams/{wildcards.sra_acc}.bam
            rm sams/{wildcards.sra_acc}.trimmed.bam
            fi
            if [[ ! -d endpoints ]]
            then
            mkdir endpoints
            fi
            if [[ -f sams/{wildcards.sra_acc}.trimmed.sorted.bam ]]
            then
            samtools mpileup -aa -A -d 600000 -B -Q 0 sams/{wildcards.sra_acc}.trimmed.sorted.bam 2>>{log} | \
            ivar consensus -p endpoints/{wildcards.sra_acc} -q 15 -t 0.5 >>{log} 2>&1
            else
            samtools mpileup -aa -A -d 600000 -B -Q 0 sams/{wildcards.sra_acc}.bam 2>>{log} | \
            ivar consensus -p endpoints/{wildcards.sra_acc} -q 15 -t 0.5 >>{log} 2>&1
            fi
            if [[ -f sams/{wildcards.sra_acc}.trimmed.sorted.bam ]]
            then
            samtools mpileup -aa -A -d 600000 -B -Q 0 \
            sams/{wildcards.sra_acc}.trimmed.sorted.bam | ivar variants -p \
            endpoints/{wildcards.sra_acc} -q 0 -t 0 -r {input.fa} -g {input.gff} > {log} 2>&1
            samtools mpileup -aa -A -d 600000 -Q 0 -q 0 -B -f {input.fa} \
            sams/{wildcards.sra_acc}.trimmed.sorted.bam | cut -f1-4 > endpoints/{wildcards.sra_acc}.depth 2> {log}
            rm sams/{wildcards.sra_acc}.trimmed.sorted.bam
            else
            samtools mpileup -aa -A -d 600000 -B -Q 0 \
            sams/{wildcards.sra_acc}.bam | ivar variants -p \
            endpoints/{wildcards.sra_acc} -q 0 -t 0 -r {input.fa} -g {input.gff} > {log} 2>&1
            samtools mpileup -aa -A -d 600000 -Q 20 -q 0 -B -f {input.fa} \
            sams/{wildcards.sra_acc}.bam | cut -f1-4 > endpoints/{wildcards.sra_acc}.depth 2> {log}
            rm sams/{wildcards.sra_acc}.bam
            fi
            freyja demix endpoints/{wildcards.sra_acc}.tsv endpoints/{wildcards.sra_acc}.depth --output endpoints/{wildcards.sra_acc}.lineages.tsv >>{log} 2>&1
            fi
            """
